# Generated by Django 4.0.4 on 2022-10-18 17:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_mytag'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('account', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_usage_type', models.CharField(choices=[('input_test', '导入测试'), ('customer_job', '客户资料'), ('test', '测试'), ('else', '其它')], default='else', help_text='料号使用类型', max_length=50, verbose_name='料号使用类型')),
                ('file_compressed', models.FileField(blank=True, help_text='整理过的原始文件.若是导入测试类型,则是rar压缩包,压缩包中只有一层文件夹.也可以是.tgz|.eps', null=True, upload_to='files', verbose_name='整理过的原始文件')),
                ('job_name', models.CharField(help_text='料号名称,有可能有重复名字', max_length=20, validators=[django.core.validators.MinLengthValidator(limit_value=3)], verbose_name='料号名称')),
                ('file_odb_g', models.FileField(blank=True, help_text='G软件转图的结果,导入测试类型需要填写此字段', null=True, upload_to='files', verbose_name='G-ODB++')),
                ('file_compressed_org', models.FileField(blank=True, help_text='未整理的原始文件,rar压缩包', null=True, upload_to='files', verbose_name='原始文件')),
                ('file_org_type', models.CharField(choices=[('gerber274X', 'Gerber274-X'), ('gerber274D', 'Gerber274-D'), ('odb++', 'ODB++'), ('eps', 'EPS'), ('else', '其它')], default='else', help_text='原始文件类型', max_length=10, verbose_name='原始文件类型')),
                ('from_object', models.CharField(blank=True, help_text='料号从哪来的', max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=2)], verbose_name='料号来源')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('published', '正式')], default='draft', help_text='草稿表示未经人工确认', max_length=10)),
                ('remark', models.CharField(blank=True, help_text='料号的说明备注', max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='备注')),
                ('file_odb_current', models.FileField(blank=True, help_text='最新一次的悦谱转图结果,不需要手工录入,可在线自动生成', null=True, upload_to='files', verbose_name='最新-EP-ODB++')),
                ('vs_result_ep', models.CharField(choices=[('passed', '成功'), ('failed', '失败'), ('none', '未比对')], default='none', help_text='导入测试管理员负责填写', max_length=10, verbose_name='悦谱比图结果')),
                ('vs_result_g', models.CharField(choices=[('passed', '成功'), ('failed', '失败'), ('none', '未比对')], default='none', help_text='导入测试管理员负责填写', max_length=10, verbose_name='G软件比图结果')),
                ('bug_info', models.CharField(blank=True, help_text='Bug信息', max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='Bug信息')),
                ('bool_layer_info', models.CharField(blank=True, choices=[('true', 'true'), ('false', 'false')], default='false', help_text='不需要人工填写,系统用', max_length=10, null=True, verbose_name='是否有层别信息')),
                ('publish', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='发布时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('vs_time_ep', models.CharField(blank=True, help_text='系统生成', max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='悦谱比对时间戳')),
                ('vs_time_g', models.CharField(blank=True, help_text='系统生成', max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='G比对时间戳')),
                ('file_odb', models.FileField(blank=True, help_text='整理好的ODB++资料,确认过是对的', null=True, upload_to='files', verbose_name='整理好的ODB++资料')),
                ('hasOrig', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有orig?', max_length=10, verbose_name='是否有orig')),
                ('hasNet', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有net?', max_length=10, verbose_name='是否有net')),
                ('hasPre', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有pre?', max_length=10, verbose_name='是否有pre')),
                ('hasPcs', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有pcs?', max_length=10, verbose_name='是否有pcs')),
                ('hasSet', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有set?', max_length=10, verbose_name='是否有set')),
                ('hasPanel', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有panel?', max_length=10, verbose_name='是否有panel')),
                ('job_type', models.CharField(choices=[('common', '普通板'), ('hdi', 'HDI'), ('led', 'LED板'), ('car', '汽车板'), ('flex', '软板'), ('rigid_flex', '软硬结合板'), ('carrier', '载板'), ('else', '其它')], default='common', help_text='料号的类型', max_length=10, verbose_name='料号类型')),
                ('job_type_1', models.CharField(blank=True, choices=[('through_hole', '通孔板'), ('non_through_hole', '非通孔板'), ('else', '其它')], default='else', help_text='料号的类型-维度1', max_length=20, null=True, verbose_name='料号类型-维度1')),
                ('job_type_2', models.CharField(blank=True, choices=[('rigid', '硬板'), ('flex', '软板'), ('rigid_flex', '软硬结合板'), ('else', '其它')], default='else', help_text='料号的类型-维度2', max_length=20, null=True, verbose_name='料号类型-维度2')),
                ('job_type_3', models.CharField(blank=True, choices=[('ic', 'IC载板'), ('led', 'LED灯板'), ('car', '汽车板'), ('server', '服务器板'), ('else', '其它')], default='else', help_text='料号的类型-维度3', max_length=20, null=True, verbose_name='料号类型-维度3')),
                ('pcsSize', models.FloatField(blank=True, help_text='pcs的profile线外接正矩形的对角线长度(单位:inch)', null=True, verbose_name='pcs对角线尺寸')),
                ('matrixRowNum', models.IntegerField(blank=True, help_text='所有层数(包括任意层)', null=True, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(0)], verbose_name='所有层数')),
                ('totalFeatureNum', models.IntegerField(blank=True, help_text='总物件数', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='总物件数')),
                ('copperLayerNum', models.IntegerField(blank=True, help_text='信号层数量(含地电层)', null=True, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(0)], verbose_name='信号层数')),
                ('pgLayerNum', models.IntegerField(blank=True, help_text='地电层数量', null=True, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(0)], verbose_name='地电层数')),
                ('hasPGlayer', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有地电层(负片层)', max_length=10, verbose_name='是否有地电层(负片层)')),
                ('linedCopper', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='线路层是否为线铜', max_length=10, verbose_name='线路层是否为线铜')),
                ('bgaNum', models.IntegerField(blank=True, help_text='BGA总数', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='BGA总数')),
                ('impLineNum', models.IntegerField(blank=True, help_text='阻抗线数(包括槽孔,镭射孔等)', null=True, validators=[django.core.validators.MaxValueValidator(100000), django.core.validators.MinValueValidator(0)], verbose_name='阻抗线数')),
                ('minLineWidth4outer', models.FloatField(blank=True, help_text='外层的最小线宽(单位:mil)', null=True, verbose_name='外层最小线宽')),
                ('minLineSpace4outer', models.FloatField(blank=True, help_text='外层的最小线距(单位:mil)', null=True, verbose_name='外层最小线距')),
                ('solderWindowNumTop', models.IntegerField(blank=True, help_text='正面防焊层物件数,如果有多层，填写总数）', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='正面防焊层物件数（总数）')),
                ('solderWindowNumBottom', models.IntegerField(blank=True, help_text='底面防焊层物件数,如果有多层，填写总数）', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='底面防焊层物件数（总数）')),
                ('solderMaxWindowNum4singleSide', models.IntegerField(blank=True, help_text='单面最多防焊开窗数量', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='单面最多防焊开窗数量')),
                ('hasSMlayer', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有防焊层?', max_length=10, verbose_name='是否有防焊层')),
                ('pcsDrlNum', models.IntegerField(blank=True, help_text='某个单支step(如orig、net、pcs)所有孔层的所有孔数量(包括槽孔,镭射孔等)，', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='pcs所有孔数')),
                ('hdiLevel', models.IntegerField(blank=True, help_text='孔阶数，HDI介数', null=True, validators=[django.core.validators.MaxValueValidator(99), django.core.validators.MinValueValidator(0)], verbose_name='孔阶数')),
                ('usage', models.CharField(blank=True, help_text='料号用途', max_length=200, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='用途')),
                ('job_url', models.URLField(blank=True, null=True, verbose_name='料号url')),
                ('origStepName', models.CharField(blank=True, help_text='原稿step名称', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='orig_step')),
                ('prepareStepName', models.CharField(blank=True, help_text='前处理完成的step名称', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='pre_step')),
                ('pcsStepName', models.CharField(blank=True, help_text='已经完成pcs处理的step名', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='pcs_step')),
                ('setStepName', models.CharField(blank=True, help_text='set拼板完成的step名', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='set_step')),
                ('panelStepName', models.CharField(blank=True, help_text='panel拼板完成的step名', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='panel_step')),
                ('impCouponStepName', models.CharField(blank=True, help_text='阻抗测试条的step名', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='阻抗step')),
                ('routLayerName', models.CharField(blank=True, help_text='rout层的名字', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='Rout层')),
                ('panelSize', models.FloatField(blank=True, help_text='panel的profile线外接正矩形的对角线长度(单位:inch)', null=True, verbose_name='panel对角线尺寸')),
                ('customerCode', models.CharField(blank=True, help_text='客户(代码)', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='客户(代码)')),
                ('author', models.ForeignKey(blank=True, help_text='料号上传人', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_jobs', to=settings.AUTH_USER_MODEL, verbose_name='负责人')),
                ('from_object_pcb_design', models.ForeignKey(blank=True, help_text='料号来源-设计端', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_job_account_customer_pcb_design', to='account.customer', verbose_name='料号来源-设计端')),
                ('from_object_pcb_factory', models.ForeignKey(blank=True, help_text='料号来源-板厂', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_job_account_customer_pcb_factory', to='account.customer', verbose_name='料号来源-板厂')),
            ],
            options={
                'db_table': 'job',
                'ordering': ('-create_time',),
            },
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(limit_value=3)])),
                ('password', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(limit_value=3)])),
                ('telephone', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator('1[3456789]\\d{9}', message='请输入正确的手机号码')])),
                ('email', models.CharField(max_length=20, validators=[django.core.validators.EmailValidator(message='请输入正确的邮箱地址')])),
            ],
            options={
                'db_table': 'register',
            },
        ),
        migrations.CreateModel(
            name='Vs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='层名称')),
                ('layer_org', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='原始层名称')),
                ('vs_result', models.CharField(blank=True, choices=[('passed', '通过'), ('failed', '失败'), ('none', '未比对')], default='none', max_length=10, null=True, verbose_name='比对结果')),
                ('vs_result_detail', models.CharField(blank=True, max_length=1000000, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='比对详细信息')),
                ('vs_method', models.CharField(blank=True, choices=[('ep', '悦谱'), ('g', 'G软件'), ('none', 'none')], default='none', max_length=10, null=True, verbose_name='比对方法')),
                ('layer_file_type', models.CharField(choices=[('gerber274X', 'Gerber274-X'), ('gerber274D', 'Gerber274-D'), ('excellon2', 'Excellon2'), ('excellon1', 'Excellon1'), ('dxf', 'DXF'), ('else', '其它')], default='else', max_length=100, verbose_name='层文件类型')),
                ('layer_type', models.CharField(choices=[('signal_outter', '外层'), ('signal_inner', '内层'), ('solder', '防焊'), ('silk', '丝印'), ('paste', '锡膏'), ('drill', '孔层'), ('rout', 'Rout'), ('slot', '槽孔'), ('else', '其它')], default='else', max_length=100, verbose_name='层类型')),
                ('features_count', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='物件数')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('published', '正式')], default='draft', max_length=10)),
                ('vs_time_ep', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='悦谱比对时间戳')),
                ('vs_time_g', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='G比对时间戳')),
                ('remark', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_vs_user', to=settings.AUTH_USER_MODEL, verbose_name='负责人')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_vs', to='job_manage.job', verbose_name='料号名称')),
            ],
            options={
                'db_table': 'vs',
                'ordering': ('-create_time',),
            },
        ),
        migrations.CreateModel(
            name='TaggedWhatever',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.mytag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShareAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publish', models.DateTimeField(default=django.utils.timezone.now)),
                ('remark', models.CharField(blank=True, max_length=20, validators=[django.core.validators.MinLengthValidator(limit_value=3)], verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('share_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_jobs_share_user', to=settings.AUTH_USER_MODEL, verbose_name='被分享人')),
                ('share_job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='job_manage_jobs_share_job', to='job_manage.job', verbose_name='被分享的料')),
            ],
            options={
                'ordering': ('share_job',),
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layer', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='层名称')),
                ('layer_org', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='原始层名称')),
                ('vs_result_manual', models.CharField(blank=True, choices=[('passed', '通过'), ('failed', '失败'), ('none', '未比对')], default='none', max_length=10, null=True, verbose_name='人工比对结果')),
                ('vs_result_ep', models.CharField(blank=True, choices=[('passed', '通过'), ('failed', '失败'), ('none', '未比对')], default='none', max_length=10, null=True, verbose_name='悦谱比对结果')),
                ('vs_result_g', models.CharField(blank=True, choices=[('passed', '通过'), ('failed', '失败'), ('none', '未比对')], default='none', max_length=10, null=True, verbose_name='G软件比对结果')),
                ('layer_file_type', models.CharField(choices=[('gerber274X', 'Gerber274-X'), ('gerber274D', 'Gerber274-D'), ('excellon2', 'Excellon2'), ('excellon1', 'Excellon1'), ('dxf', 'DXF'), ('else', '其它')], default='else', max_length=100, verbose_name='层文件类型')),
                ('layer_type', models.CharField(choices=[('signal_outter', '外层'), ('signal_inner', '内层'), ('solder', '防焊'), ('silk', '丝印'), ('paste', '锡膏'), ('drill', '孔层'), ('rout', 'Rout'), ('slot', '槽孔'), ('else', '其它')], default='else', max_length=100, verbose_name='层类型')),
                ('features_count', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='物件数')),
                ('units_ep', models.CharField(choices=[('Inch', 'Inch'), ('MM', 'MM'), ('none', '未记录')], default='none', max_length=10, verbose_name='units_EP')),
                ('coordinates_ep', models.CharField(choices=[('Absolute', 'Absolute'), ('Incremental', 'Incremental'), ('none', '未记录')], default='none', max_length=20, verbose_name='coordinates_ep')),
                ('zeroes_omitted_ep', models.CharField(choices=[('Leading', 'Leading'), ('Trailing', 'Trailing'), ('none', '未记录')], default='none', max_length=10, verbose_name='省零EP')),
                ('number_format_A_ep', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('none', '未记录')], default='none', max_length=10, verbose_name='整数EP')),
                ('number_format_B_ep', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('none', '未记录')], default='none', max_length=10, verbose_name='小数EP')),
                ('tool_units_ep', models.CharField(choices=[('Inch', 'Inch'), ('MM', 'MM'), ('Mils', 'Mils'), ('none', '未记录')], default='none', max_length=10, verbose_name='Tool_units_EP')),
                ('units_g', models.CharField(choices=[('Inch', 'Inch'), ('MM', 'MM'), ('none', '未记录')], default='none', max_length=10, verbose_name='units_G')),
                ('coordinates_g', models.CharField(choices=[('Absolute', 'Absolute'), ('Incremental', 'Incremental'), ('none', '未记录')], default='none', max_length=20, verbose_name='coordinates_g')),
                ('zeroes_omitted_g', models.CharField(choices=[('Leading', 'Leading'), ('Trailing', 'Trailing'), ('none', '未记录')], default='none', max_length=10, verbose_name='省零G')),
                ('number_format_A_g', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('none', '未记录')], default='none', max_length=10, verbose_name='整数G')),
                ('number_format_B_g', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('none', '未记录')], default='none', max_length=10, verbose_name='小数G')),
                ('tool_units_g', models.CharField(choices=[('Inch', 'Inch'), ('MM', 'MM'), ('Mils', 'Mils'), ('none', '未记录')], default='none', max_length=10, verbose_name='Tool_units_G')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('published', '正式')], default='draft', max_length=10)),
                ('vs_time_ep', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='悦谱比对时间戳')),
                ('vs_time_g', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='G比对时间戳')),
                ('remark', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('cc_test1', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='cc_test')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_layer_user', to=settings.AUTH_USER_MODEL, verbose_name='负责人')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_layer', to='job_manage.job', verbose_name='料号名称')),
            ],
            options={
                'db_table': 'layer',
                'ordering': ('-create_time',),
            },
        ),
        migrations.AddField(
            model_name='job',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='job_manage.TaggedWhatever', to='taggit.MyTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Bug',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bug', models.CharField(blank=True, max_length=200, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='Bug名称')),
                ('bug_zentao_id', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='禅道ID')),
                ('bug_zentao_pri', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('none', 'none')], default='none', max_length=10, null=True, verbose_name='优先级')),
                ('bug_zentao_status', models.CharField(blank=True, choices=[('active', '激活'), ('closed', '已关闭'), ('resloved', '已解决'), ('none', 'none')], default='none', max_length=10, null=True, verbose_name='禅道状态')),
                ('bug_creator', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='创建者')),
                ('bug_create_date', models.DateTimeField(blank=True, null=True, verbose_name='禅道创建时间')),
                ('bug_assigned_to', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=1)], verbose_name='指派给')),
                ('status', models.CharField(blank=True, choices=[('draft', '草稿'), ('published', '正式')], default='draft', max_length=10, null=True, verbose_name='发布状态')),
                ('refresh_time', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='刷新时间戳')),
                ('remark', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_bug_user', to=settings.AUTH_USER_MODEL, verbose_name='负责人')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_manage_bug', to='job_manage.job', verbose_name='料号名称')),
            ],
            options={
                'db_table': 'bug',
                'ordering': ('-create_time',),
            },
        ),
    ]
